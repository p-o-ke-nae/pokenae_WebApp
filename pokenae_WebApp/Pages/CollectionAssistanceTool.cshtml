@page "/CollectionAssistanceTool/{spreadsheetId}"
@model pokenae_WebApp.Pages.CollectionAssistanceToolModel
@{
    var spreadsheetId = Model.SpreadsheetId;
}

<h3>Collection Assistance Tool</h3>

@if (Model.Columns == null)
{
    <p>Loading...</p>
}
else
{
    <div id="tablesContainer">
        <!-- テーブルのベースを作成 -->
        <table id="dataTable-template" style="border-collapse: collapse; width: 100%; margin-bottom: 20px; display: none;">
            <thead>
                <tr>
                    <th style="width: 30px; height: 30px; border: 1px solid black;"></th> <!-- Add a header for the image column -->
                    @foreach (var column in Model.Columns.Where(c => c.IsVisible))
                    {
                        <th style="width:@column.Width; border: 1px solid black;" data-width="@column.Width">@column.Header</th>
                    }
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>

    <!-- モーダルのHTML -->
    <div id="imageModal" class="modal" style="display: none;">
        <span class="close" onclick="closeModal()">&times;</span>
        <div id="modalImageContainer">
            <div id="modalImageFrame">
                <img class="modal-content" id="modalImage">
            </div>
        </div>
        <div id="modalInfoContainer">
            <div id="modalInfoTitle"><h4>詳細</h4></div>
            <div id="modalInfoWrapper">
                <div id="modalInfo"></div>
            </div>
        </div>
        <button class="modal-nav" id="prevRecord" onclick="showPrevRecord()">&lt;</button>
        <button class="modal-nav" id="nextRecord" onclick="showNextRecord()">&gt;</button>
    </div>
}

@section Scripts {
    <script>
        const columnIndices = @Html.Raw(Json.Serialize(Model.Columns.Where(c => c.IsVisible).Select(c => Model.Columns.IndexOf(c) + 4).ToList())); // +4 to skip the ID, background color, item name, and image columns
        const hiddenColumnIndices = @Html.Raw(Json.Serialize(Model.Columns.Where(c => !c.IsVisible).Select(c => Model.Columns.IndexOf(c) + 4).ToList())); // +4 to skip the ID, background color, item name, and image columns
        const columnHeaders = @Html.Raw(Json.Serialize(Model.Columns.Select(c => c.Header).ToList()));
        const columnWidths = @Html.Raw(Json.Serialize(Model.Columns.Where(c => c.IsVisible).Select(c => c.Width).ToList()));
        const spreadsheetId = "@spreadsheetId";
        const baseUrl = "https://script.google.com/macros/s/AKfycby0eB-AnstPy3b3m_ghF1rcZnNpUWqmuM4ZXWPY0-9n0iCqdoStfR0GBfgAIu3lMRP2/exec";

        let initialData = null;
        let tableTemplate = null;
        let currentRecordIndex = null;
        let currentTableName = null;
        let currentGroupedData = null;

        async function fetchData() {
            const url = `${baseUrl}?spreadsheetId=${spreadsheetId}&sheetName=Record`;
            const response = await fetch(url);
            if (!response.ok) {
                console.error("Failed to fetch data: " + response.statusText);
                return [];
            }
            const data = await response.json();
            return data.slice(1); // Skip the first row
        }

        function isDataDifferent(newData, oldData) {
            if (newData.length !== oldData.length) return true;
            for (let i = 0; i < newData.length; i++) {
                if (newData[i].length !== oldData[i].length) return true;
                for (let j = 0; j < newData[i].length; j++) {
                    if (newData[i][j] !== oldData[i][j]) return true;
                }
            }
            return false;
        }

        function createTable(groupedData) {
            const container = document.getElementById("tablesContainer");
            container.innerHTML = ""; // コンテナの内容をクリア
            currentGroupedData = groupedData; // 現在のグループ化されたデータを保存

            // 各アイテム名ごとにグループ化されたデータを処理
            Object.keys(groupedData).forEach(itemName => {
                // 項目名を表示する要素を作成
                const itemNameHeader = document.createElement("h4");
                itemNameHeader.innerText = itemName;
                container.appendChild(itemNameHeader);

                // テーブル要素を複製
                const table = tableTemplate.cloneNode(true);
                table.id = `dataTable-${itemName}`;
                table.style.display = "table";

                // テーブルボディを作成
                const tbody = table.querySelector("tbody");
                groupedData[itemName].forEach((row, rowIndex) => {
                    const tr = document.createElement("tr");
                    tr.style.backgroundColor = row[1] ? row[1] : '#f0f0f0'; // Set background color from the second column or default to light gray
                    tr.style.height = "30px";
                    tr.style.border = "1px solid black";

                    const imgTd = document.createElement("td");
                    imgTd.style.border = "1px solid black";
                    imgTd.width = "30"; // 幅を高さと同じに設定
                    const img = document.createElement("img");
                    img.src = row[3];
                    img.alt = "Image";
                    img.width = "30"; // 幅を高さと同じに設定
                    img.height = "30";
                    img.onerror = function() {
                        imgTd.removeChild(img); // 画像の読み込みに失敗した場合、画像要素を削除
                    };
                    imgTd.appendChild(img);
                    tr.appendChild(imgTd);

                    columnIndices.forEach((columnIndex, index) => {
                        const td = document.createElement("td");
                        td.style.border = "1px solid black";
                        td.width = columnWidths[index]; // 列の幅を設定
                        td.innerText = row[columnIndex];
                        tr.appendChild(td);
                    });

                    // 行クリックイベントを追加
                    tr.addEventListener("click", function() {
                        currentRecordIndex = rowIndex;
                        currentTableName = itemName;
                        showModal(row[3], row);
                    });

                    tbody.appendChild(tr);
                });
                table.appendChild(tbody);

                // テーブルをコンテナに追加
                container.appendChild(table);
            });
        }

        function showModal(imageSrc, rowData) {
            const modal = document.getElementById("imageModal");
            const modalImage = document.getElementById("modalImage");
            const modalInfo = document.getElementById("modalInfo");
            modal.style.display = "block";
            modalImage.src = imageSrc;

            // 全ての情報を表示（画像列を除く）
            modalInfo.innerHTML = "";
            columnHeaders.forEach((header, index) => {
                const indexreal = index + 4;
                const infoItem = document.createElement("div");
                infoItem.className = "modal-info-item";

                const infoHeader = document.createElement("div");
                infoHeader.className = "modal-info-item-header";
                infoHeader.innerText = header;

                const infoDetail = document.createElement("div");
                infoDetail.className = "modal-info-item-detail";
                infoDetail.innerText = rowData[indexreal];

                infoItem.appendChild(infoHeader);
                infoItem.appendChild(infoDetail);
                modalInfo.appendChild(infoItem);
            });
        }

        function closeModal() {
            const modal = document.getElementById("imageModal");
            modal.style.display = "none";
        }

        function showPrevRecord() {
            if (currentRecordIndex > 0) {
                currentRecordIndex--;
                const rowData = currentGroupedData[currentTableName][currentRecordIndex];
                showModal(rowData[3], rowData);
            }
        }

        function showNextRecord() {
            if (currentRecordIndex < currentGroupedData[currentTableName].length - 1) {
                currentRecordIndex++;
                const rowData = currentGroupedData[currentTableName][currentRecordIndex];
                showModal(rowData[3], rowData);
            }
        }

        async function refreshTable() {
            const newData = await fetchData();
            if (!isDataDifferent(newData, initialData)) return; // データに差異がない場合は更新しない

            const groupedData = newData.reduce((acc, row) => {
                const itemName = row[2];
                if (!acc[itemName]) {
                    acc[itemName] = [];
                }
                acc[itemName].push(row);
                return acc;
            }, {});

            createTable(groupedData); // テーブルを更新

            initialData = newData; // 更新後のデータを保存

            // モーダルが表示されている場合、現在のレコードの情報を更新
            const modal = document.getElementById("imageModal");
            if (modal.style.display === "block" && currentTableName !== null && currentRecordIndex !== null) {
                const rowData = currentGroupedData[currentTableName][currentRecordIndex];
                showModal(rowData[3], rowData);
            }
        }

        async function initializeTable() {
            tableTemplate = document.getElementById("dataTable-template"); // テーブルテンプレートを保存
            initialData = await fetchData();
            const groupedData = initialData.reduce((acc, row) => {
                const itemName = row[2];
                if (!acc[itemName]) {
                    acc[itemName] = [];
                }
                acc[itemName].push(row);
                return acc;
            }, {});

            createTable(groupedData); // テーブルを更新

            setInterval(refreshTable, 1000); // 1秒ごとにテーブルを更新
        }

        initializeTable(); // テーブルを初期化
    </script>

}

